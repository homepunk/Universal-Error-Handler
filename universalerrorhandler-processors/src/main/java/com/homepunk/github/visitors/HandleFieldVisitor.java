package com.homepunk.github.visitors;

import com.homepunk.github.HandleField;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import com.sun.source.util.Trees;
import com.sun.tools.javac.code.Flags;
import com.sun.tools.javac.processing.JavacProcessingEnvironment;
import com.sun.tools.javac.tree.JCTree;
import com.sun.tools.javac.tree.TreeMaker;
import com.sun.tools.javac.tree.TreeTranslator;
import com.sun.tools.javac.util.Names;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.Writer;

import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.lang.model.util.ElementScanner7;
import javax.tools.Diagnostic;
import javax.tools.JavaFileObject;

/**
 * Created by Homepunk on 30.08.2017.
 **/

public class HandleFieldVisitor extends ElementScanner7<Void, Void> {
    private final CodeBlock.Builder handleField = CodeBlock.builder();
    private final Trees trees;
    // output warnings, info etc on compilation time, interrupt compilation process if we send message with ERROR priority
    private final Messager logger;
    // knows where compilation runs, architect folders in builds/intermediate...
    private final Filer filer;
    // It's our activity
    private final TypeElement originElement;
    // Gives us ability to create, select etc AST objects
    private final TreeMaker treeMaker;
    // converter from our java initial format to format which would be accepted by compiler
    private final Names names;
    private final Element element;
    private VariableElement field;
    private int type;

    public HandleFieldVisitor(ProcessingEnvironment environment, Element element) {
        super();
        this.element = element;
        originElement = (TypeElement) element.getEnclosingElement();
        filer = environment.getFiler();
        logger = environment.getMessager();
        trees = Trees.instance(environment);
        final JavacProcessingEnvironment javacEnvironment = (JavacProcessingEnvironment) environment;
        names = Names.instance(javacEnvironment.getContext());
        treeMaker = TreeMaker.instance(javacEnvironment.getContext());

    }

    @Override
    public Void visitVariable(VariableElement field, Void aVoid) {
        this.field = field;
        ((JCTree) trees.getTree(field)).accept(new TreeTranslator() {
            @Override
            public void visitVarDef(JCTree.JCVariableDecl jcVariableDecl) {
                super.visitVarDef(jcVariableDecl);
                // remove private just here
                jcVariableDecl.mods.flags &= ~Flags.PRIVATE;
            }
        });

        return super.visitVariable(field, aVoid);
    }


    public void brewJava() {
        HandleField annotation = element.getAnnotation(HandleField.class);
        type = annotation.value();

        final TypeSpec typeSpec = TypeSpec.classBuilder(originElement.getSimpleName() + "$$" + field.getSimpleName() + "FieldHandler")
                .addModifiers(Modifier.ABSTRACT)
                .addOriginatingElement(originElement)
                .addMethod(MethodSpec.methodBuilder("handle")
                        .addModifiers(Modifier.PUBLIC)
                        .addParameter(String.class, "target")
                        .addCode(createCodeBlock())
                        .build())
                .build();

        writeJavaFile(typeSpec);
    }

    private CodeBlock createCodeBlock() {
        return handleField
                .addStatement("github.homepunk.com.universalerrorhandler.managers.UniversalHandleManager.target(new EditText(), $L)", type)
                .build();
    }

    private void writeJavaFile(TypeSpec typeSpec) {
        final JavaFile javaFile = JavaFile.builder(originElement.getEnclosingElement().toString(), typeSpec)
                .addFileComment("Generated by HandleField processor, don't modify")
                .build();

        try {
            final JavaFileObject sourceFile = filer.createSourceFile(javaFile.packageName + "." + typeSpec.name, originElement);

            try (final Writer writer = new BufferedWriter(sourceFile.openWriter())) {
                javaFile.writeTo(writer);
            }

        } catch (IOException e) {
            logger.printMessage(Diagnostic.Kind.ERROR, e.getMessage(), originElement);
        }
    }
}
